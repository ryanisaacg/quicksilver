extern crate serde_json;

#[cfg(feature="window")] use graphics::{AtlasError, ImageError};
use std::io::ErrorKind as IOError;
#[cfg(feature="saving")] use serde_json::error::Category as SerdeError;
#[cfg(feature="sounds")] use sound::SoundError;

#[derive(Clone, Debug)]
/// An error generated by some Quicksilver subsystem
pub enum QuicksilverError {
    /// An error from an image atlas
    #[cfg(feature="window")] AtlasError(AtlasError),
    /// An error from loading an image
    #[cfg(feature="window")] ImageError(ImageError),
    /// An error from loading a sound
    #[cfg(feature="sounds")] SoundError(SoundError),
    /// An error from loading a file
    IOError(IOError),
    /// A serialize or deserialize error
    #[cfg(feature="saving")] SerdeError(SerdeError),
    /// There was an error loading a font file
    #[cfg(feature="fonts")] InvalidFont
}

#[cfg(feature="window")]
impl From<ImageError> for QuicksilverError {
    fn from(err: ImageError) -> QuicksilverError {
        QuicksilverError::ImageError(err)
    }
}

#[cfg(feature="sounds")]
impl From<SoundError> for QuicksilverError {
    fn from(err: SoundError) -> QuicksilverError {
        QuicksilverError::SoundError(err)
    }
}

#[cfg(feature="window")]
impl From<AtlasError> for QuicksilverError {
    fn from(err: AtlasError) -> QuicksilverError {
        QuicksilverError::AtlasError(err)
    }
}

impl From<IOError> for QuicksilverError {
    fn from(err: IOError) -> QuicksilverError {
        QuicksilverError::IOError(err)
    }
}

#[cfg(feature="saving")]
impl From<serde_json::Error> for QuicksilverError {
    fn from(err: serde_json::Error) -> QuicksilverError {
        QuicksilverError::SerdeError(err.classify())
    }
}
